dataY_test=Y[sample == FALSE]
#dataY_train=ifelse(dataY_train=="low_pathology",0,1)
#dataY_train=as.factor(dataY_train)
#dataY_test=ifelse(dataY_test=="low_pathology",0,1)
#dataY_test=as.factor(dataY_test)
dataX_train=do.call("cbind", dataX_train)
dataX_test=do.call("cbind", dataX_test)
####
dataX_train=dataX_train[,colnames(dataX_train) %in% signatures_full_gene_prot[[signature]]]
train=data.frame(cbind(dataX_train,dataY_train))
dataX_test=dataX_test[,colnames(dataX_test) %in% signatures_full_gene_prot[[signature]]]
# Building the model
# training the model by assigning sales column
# as target variable and rest other columns
# as independent variables
#model <- lm(dataY_train ~ ., data = train)
library(caret)
train.control <- trainControl(method = "cv", number = 10)
model <- train(dataY_train ~ ., data = train, method = "treebag",
trControl = train.control)
result_predictive_ability1[[signature]]=model$results
# predicting the target variable
predictions <- stats::predict(model, data.frame(dataX_test))
# computing model performance metrics
result_predictive_ability2[[signature]]=data.frame( R2 = R2(predictions, dataY_test),
RMSE = RMSE(predictions, dataY_test),
MAE = MAE(predictions, dataY_test))
}
result_predictive_ability1
model <- train(dataY_train ~ ., data = train, method = "brnn",
trControl = train.control)
model$results
model <- train(dataY_train ~ ., data = train, method = "svmLinear3",
trControl = train.control)
model <- train(dataY_train ~ ., data = train, method = "svmLinear3",
trControl = train.control)
model$results
# predicting the target variable
predictions <- stats::predict(model, data.frame(dataX_test))
# computing model performance metrics
result_predictive_ability2[[signature]]=data.frame( R2 = R2(predictions, dataY_test),
RMSE = RMSE(predictions, dataY_test),
MAE = MAE(predictions, dataY_test))
data.frame( R2 = R2(predictions, dataY_test),
RMSE = RMSE(predictions, dataY_test),
MAE = MAE(predictions, dataY_test))
result_predictive_ability1=list()
result_predictive_ability2=list()
for(signature in names(signatures_full_gene_prot)){
#### test / train logistic regression model
require(caTools)
set.seed(101)
Y=metadata$gpath
sample = sample.split(metadata[['gpath_cat']], SplitRatio = 0.8)
dataX_train=lapply(X, function(x) {x[sample,]})
dataY_train=Y[sample]
dataX_test=lapply(X, function(x) {x[sample == FALSE,]})
dataY_test=Y[sample == FALSE]
#dataY_train=ifelse(dataY_train=="low_pathology",0,1)
#dataY_train=as.factor(dataY_train)
#dataY_test=ifelse(dataY_test=="low_pathology",0,1)
#dataY_test=as.factor(dataY_test)
dataX_train=do.call("cbind", dataX_train)
dataX_test=do.call("cbind", dataX_test)
####
dataX_train=dataX_train[,colnames(dataX_train) %in% signatures_full_gene_prot[[signature]]]
train=data.frame(cbind(dataX_train,dataY_train))
dataX_test=dataX_test[,colnames(dataX_test) %in% signatures_full_gene_prot[[signature]]]
# Building the model
# training the model by assigning sales column
# as target variable and rest other columns
# as independent variables
#model <- lm(dataY_train ~ ., data = train)
library(caret)
train.control <- trainControl(method = "cv", number = 10)
model <- train(dataY_train ~ ., data = train, method = "svmLinear3",
trControl = train.control)
result_predictive_ability1[[signature]]=model$results
# predicting the target variable
predictions <- stats::predict(model, data.frame(dataX_test))
# computing model performance metrics
result_predictive_ability2[[signature]]=data.frame( R2 = R2(predictions, dataY_test),
RMSE = RMSE(predictions, dataY_test),
MAE = MAE(predictions, dataY_test))
}
result_predictive_ability1
result_predictive_ability2
Y=metadata$gpath_cat
sample = sample.split(metadata[['gpath_cat']], SplitRatio = 0.8)
dataX_train=lapply(X, function(x) {x[sample,]})
dataY_train=Y[sample]
dataX_test=lapply(X, function(x) {x[sample == FALSE,]})
dataY_test=Y[sample == FALSE]
dataY_train=ifelse(dataY_train=="low_pathology",0,1)
dataY_train=as.factor(dataY_train)
dataY_test=ifelse(dataY_test=="low_pathology",0,1)
dataY_test=as.factor(dataY_test)
dataX_train=do.call("cbind", dataX_train)
dataX_test=do.call("cbind", dataX_test)
####
dataX_train=dataX_train[,colnames(dataX_train) %in% signatures_full_gene_prot[[signature]]]
train=data.frame(cbind(dataX_train,dataY_train))
dataX_test=dataX_test[,colnames(dataX_test) %in% signatures_full_gene_prot[[signature]]]
# Building the model
# training the model by assigning sales column
# as target variable and rest other columns
# as independent variables
#model <- lm(dataY_train ~ ., data = train)
library(caret)
train.control <- trainControl(method = "cv", number = 10)
model <- train(dataY_train ~ ., data = train, method = "adaboos",
trControl = train.control)
result_predictive_ability1[[signature]]=model$results
train.control <- trainControl(method = "cv", number = 10)
model <- train(dataY_train ~ ., data = train, method = "logreg",
trControl = train.control)
dataY_train
train
Y=metadata$gpath_cat
sample = sample.split(metadata[['gpath_cat']], SplitRatio = 0.8)
dataX_train=lapply(X, function(x) {x[sample,]})
dataY_train=Y[sample]
dataX_test=lapply(X, function(x) {x[sample == FALSE,]})
dataY_test=Y[sample == FALSE]
dataY_train=ifelse(dataY_train=="low_pathology",0,1)
dataY_train=as.factor(dataY_train)
dataY_test=ifelse(dataY_test=="low_pathology",0,1)
dataY_test=as.factor(dataY_test)
dataX_train=do.call("cbind", dataX_train)
dataX_test=do.call("cbind", dataX_test)
####
dataX_train=dataX_train[,colnames(dataX_train) %in% signatures_full_gene_prot[[signature]]]
train=data.frame(cbind(dataX_train,dataY_train))
train
dataY_train
train=data.frame(cbind(dataX_train,dataY_train))
View(train)
dataY_train=ifelse(dataY_train=="low_pathology",0,1)
dataY_test=ifelse(dataY_test=="low_pathology",0,1)
dataX_train=do.call("cbind", dataX_train)
dataX_test=do.call("cbind", dataX_test)
require(caTools)
set.seed(101)
Y=metadata$gpath_cat
sample = sample.split(metadata[['gpath_cat']], SplitRatio = 0.8)
dataX_train=lapply(X, function(x) {x[sample,]})
dataY_train=Y[sample]
dataX_test=lapply(X, function(x) {x[sample == FALSE,]})
dataY_test=Y[sample == FALSE]
dataY_train=ifelse(dataY_train=="low_pathology",0,1)
dataY_test=ifelse(dataY_test=="low_pathology",0,1)
dataX_train=do.call("cbind", dataX_train)
dataX_test=do.call("cbind", dataX_test)
####
dataX_train=dataX_train[,colnames(dataX_train) %in% signatures_full_gene_prot[[signature]]]
train=data.frame(cbind(dataX_train,dataY_train))
train
dataX_test=dataX_test[,colnames(dataX_test) %in% signatures_full_gene_prot[[signature]]]
train.control <- trainControl(method = "cv", number = 10)
model <- train(dataY_train ~ ., data = train, method = "logreg",
trControl = train.control)
train.control
train
model <- train(dataY_train ~ ., data = train, method = "logreg")
model
model <- train(dataY_train ~ ., data = train, method = "logreg",
trControl = train.control)
# training the model by assigning sales column
# as target variable and rest other columns
# as independent variables
model <-glm( dataY_train ~ ., data=train, family=binomial(link='logit'))
model$results
confusionMatrix(data = predictions, reference = dataY_test, mode = "prec_recall")
predictions
# predicting the target variable
predictions <- stats::predict(model, data.frame(dataX_test))
predictions
setwd("~/Desktop/data")
metadata=read.table(file = 'IHC_values_formatted_26_04_22.tsv', sep = '\t', header = TRUE)
metadata$trem2_all=ifelse(metadata$TREM2Variant=='none','CV','TREM2')
View(metadata)
metadata$CaseID=metadata$case_id
metadata$CaseID=str_replace(metadata$CaseID, pattern='/', replacement='.')
library(str)
library(stringr)
metadata$CaseID=str_replace(metadata$CaseID, pattern='/', replacement='.')
metadata$CaseID=str_replace(metadata$CaseID, pattern='-', replacement='.')
metadata$CaseID=str_replace(metadata$CaseID, pattern=fixed('*'), replacement= '')
metadata=metadata[c("CaseID","AD/CTRL","TREM2Variant",'APOE','PostMortemDelayHours','trem2_all')]
metadata$`AD/CTRL`=metadata$diagnosis
metadata$TREM2Variant=metadata$trem2
metadata$PostMortemDelayHours=metadata$PMD
metadata=metadata[c("CaseID","AD/CTRL","TREM2Variant",'PostMortemDelayHours','trem2_all')]
metadata=metadata[!duplicated(metadata$CaseID),]
metadata$PostMortemDelayHours=as.numeric(metadata$PostMortemDelayHours)
metadata$pmi_median=ifelse(metadata$PostMortemDelayHours>median(metadata$PostMortemDelayHours, na.rm = TRUE),'High_pmi','Low_pmi')
metadata$pmi_median=as.factor(metadata$pmi_median)
View(metadata)
setwd("~/Dropbox (UK Dementia Research Institute)/PhD/CoMarker_analyses")
write_csv(metadata,"metadata_test.csv")
library(tidyverse)
library(plyr)
library(readr)
library(stringr)
library(dplyr)
library(rqdatatable)
library(rlist)
library(ggplot2)
library(gridExtra)
library(ggsignif)
library(ggpubr)
library(paletteer)
write_csv(metadata,"metadata_test.csv")
image_directory="/Users/eleonoreschneegans/Dropbox (UK Dementia Research Institute)/PhD/TREM2 analysis/test"
metadata=metadata %>% mutate_if(is.character,factor)
View(metadata)
metadata=read_csv('metadata_test.csv')
metadata=metadata %>% mutate_if(is.character,factor)
metadata=metadata %>% mutate_if(is.character(),factor)
typeof(metadata$CaseID)
typeof(metadata$TREM2Variant)
metadata=metadata[c("CaseID","AD/CTRL","TREM2Variant",'PostMortemDelayHours','trem2_all')]
metadata=metadata %>% mutate_if(is.character,factor)
metadata$trem2_all=as.factor(metadata$trem2_all)
setwd(image_directory)
getwd()
files=list.files(pattern = "twomarkers.csv$", recursive = TRUE)
my.data <- list()
for (i in 1:length(files)){
my.data[[i]] <- read.csv(files[[i]])
}
names(my.data)=substr(files,1,12)
df <- do.call("rbind", my.data)
## reorganise colnames
df$CaseID=rownames(df)
df$CaseID=sub("\\i.*", "", df$CaseID)
df$CaseID=gsub(" ","",df$CaseID)
df$replicate=sub("\\/.*", "", rownames(df))
df$replicate=sub("\\..*", "", df$replicate)
View(df)
results=df %>%
group_by(CaseID,Slice)%>%
dplyr::summarize(Mean_count = mean(Count, na.rm = TRUE), Mean_area=mean(Total.Area, na.rm = TRUE)) %>%
as.data.frame()
## merge metadata
metadata=metadata[which(metadata$CaseID %in% results$CaseID),]
merge=merge(results,metadata,all=TRUE, by='CaseID')
View(merge)
# Filter count outliers
df %>% group_by(Slice)
# Filter count outliers
df %>% group_by(Slice)  %>%summarize(quant5 = quantile(Count, probs = 0.05),
quant95 = quantile(Count, probs = 0.95))
# Filter count outliers
df %>% group_by(Slice)  %>%summarize(quant5 = quantile(Count, probs = 0.05, na.rm=T),
quant95 = quantile(Count, probs = 0.95, na.rm=T))
df <- do.call("rbind", my.data)
## reorganise colnames
df$CaseID=rownames(df)
df$CaseID=sub("\\i.*", "", df$CaseID)
df$CaseID=gsub(" ","",df$CaseID)
df$replicate=sub("\\/.*", "", rownames(df))
df$replicate=sub("\\..*", "", df$replicate)
# Filter count outliers
df %>% group_by(Slice)  %>%summarize(quant5 = quantile(Count, probs = 0.05, na.rm=T),
quant95 = quantile(Count, probs = 0.95, na.rm=T))
df %>% group_by(Slice)
df %>%
group_by(Slice)  %>%
summarize(quant5 = quantile(Count, probs = 0.05, na.rm=T),
quant95 = quantile(Count, probs = 0.95, na.rm=T))
typeof(df$Slice)
df$Slice=as.factor(df$Slice)
# Filter count outliers
df %>%
group_by(Slice)  %>%
summarize(quant5 = quantile(Count, probs = 0.05, na.rm=T),
quant95 = quantile(Count, probs = 0.95, na.rm=T))
df$Slice
df %>%
group_by(Slice)%>%
summarize(quant5 = quantile(Count, probs = 0.05, na.rm=T),
quant95 = quantile(Count, probs = 0.95, na.rm=T))
df %>%
group_by(Slice)
View(df)
# Filter count outliers
df %>%
group_by(Slice)%>%
summarize(quant5 = quantile(Count, probs = c(0.05), na.rm=TRUE),
quant95 = quantile(Count, probs = c(0.95), na.rm=TRUE))
# Filter count outliers
colnames(df)
t=df %>%
group_by(Slice)%>%
summarize(quant5 = quantile(Count, probs = c(0.05), na.rm=TRUE),
quant95 = quantile(Count, probs = c(0.95), na.rm=TRUE))
View(t)
t=df %>%
group_by(Slice)%>%
summarize(quant5 = quantile(Count, probs = c(0.05), na.rm=F),
quant95 = quantile(Count, probs = c(0.95), na.rm=F))
t=df %>%
group_by(Slice)%>%
summarize(quant5 = quantile(Count, probs = c(.05), na.rm=TRUE),
quant95 = quantile(Count, probs = c(.95), na.rm=TRUE))
# Filter count outliers
library(dplyr)
df %>%
group_by(Slice)%>%
summarize(quant5 = quantile(Count, probs = c(.05), na.rm=TRUE),
quant95 = quantile(Count, probs = c(.95), na.rm=TRUE))
df %>%
group_by(Slice)%>%
summarize(quant5 = quantile(Count, probs = c(.5), na.rm=TRUE),
quant95 = quantile(Count, probs = c(.25), na.rm=TRUE))
View(df)
df=data.frame(df)
df %>%
group_by(Slice)%>%
summarize(quant5 = quantile(Count, probs = c(.05), na.rm=TRUE),
quant95 = quantile(Count, probs = c(.95), na.rm=TRUE))
df
typeof(df$Count)
df$Count=as.numeric(df$Count)
df %>%
group_by(Slice)%>%
summarize(quant5 = quantile(Count, probs = c(.05), na.rm=TRUE),
quant95 = quantile(Count, probs = c(.95), na.rm=TRUE))
factor(df$Slice)
levels(df$Slice)
# Filter count outliers
detach(package:plyr)
df %>%
group_by(Slice)%>%
summarize(quant5 = quantile(Count, probs = c(.05), na.rm=TRUE),
quant95 = quantile(Count, probs = c(.95), na.rm=TRUE))
df %>%
group_by(Slice)%>%
summarize(quant5 = quantile(Count, probs = c(0.05), na.rm=TRUE),
quant95 = quantile(Count, probs = c(0.95), na.rm=TRUE))
quantiles=df %>%
group_by(Slice)%>%
summarize(quant5 = quantile(Count, probs = c(0.05), na.rm=TRUE),
quant95 = quantile(Count, probs = c(0.95), na.rm=TRUE))
View(quantiles)
reference_marker="Iba1"
marker1="CD68"
marker2='HLA-DR'
markers=c(reference_marker,marker1,marker2,marker3,marker4,marker5)
marker3=''
marker4=''
marker5=''
markers=c(reference_marker,marker1,marker2,marker3,marker4,marker5)
quantiles=df %>%
group_by(Slice)%>%
summarize(quant95 = quantile(Count, probs = c(0.95), na.rm=TRUE))
View(quantiles)
quantiles=df %>%
group_by(Slice)%>%
summarize(quant95 = quantile(Count, probs = c(0.98), na.rm=TRUE))
quantiles=df %>%
group_by(Slice)%>%
summarize(quant95 = quantile(Total.Area, probs = c(0.98), na.rm=TRUE))
View(quantiles)
df %>% left_join(quantiles, by = 'Slice') %>%
filter(number >= quant95)
df %>% left_join(quantiles, by = 'Slice') %>%
filter(Count >= quant95)
df %>% left_join(quantiles, by = 'Slice') %>%
filter(Total.Area >= quant95)
t=df %>% left_join(quantiles, by = 'Slice') %>%
filter(Total.Area >= quant95)
View(t)
t=df %>% left_join(quantiles, by = 'Slice')
View(t)
df_filtered=df[df$Slice %in% markers,]
View(df_filtered)
t=df_filtered %>% left_join(quantiles, by = 'Slice') %>%
filter(Total.Area >= quant95)
t=df_filtered %>% left_join(quantiles, by = 'Slice')
View(t)
t=df_filtered %>% left_join(quantiles, by = 'Slice') %>%
filter(Total.Area <= quant95)
View(t)
t=df_filtered %>% left_join(quantiles, by = 'Slice') %>%
filter(Total.Area >= quant95)
View(t)
flags=df_filtered %>% left_join(quantiles, by = 'Slice') %>%
filter(Total.Area >= quant95)
replicated_flags=flags$replicate
replicated_flags
View(flags)
replicated_flags
`%!in%` <- Negate(`%in%`)
df=df[which(df$replicate %!in% replicated_flags),]
levels(df$Slice)
View(quantiles)
length(unique(replicated_flags))
names(my.data)=substr(files,1,12)
df <- do.call("rbind", my.data)
## reorganise colnames
df$CaseID=rownames(df)
df$CaseID=sub("\\i.*", "", df$CaseID)
df$CaseID=gsub(" ","",df$CaseID)
df$replicate=sub("\\/.*", "", rownames(df))
df$replicate=sub("\\..*", "", df$replicate)
# Filter count outliers
df$Slice=as.factor(df$Slice)
df$Count=as.numeric(df$Count)
quantiles=df %>%
group_by(Slice)%>%
summarize(quant0 = quantile(Total.Area, probs = c(0.02), na.rm=TRUE),
quant1 = quantile(Total.Area, probs = c(0.98), na.rm=TRUE))
View(quantiles)
`%!in%` <- Negate(`%in%`)
markers=c(reference_marker,marker1,marker2,marker3,marker4,marker5)
df_filtered=df[df$Slice %in% markers,]
flags=df_filtered %>% left_join(quantiles, by = 'Slice') %>%
filter(Total.Area >= quant1 & Total.Area <= quant0)
replicated_flags=flags$replicate
replicated_flags
flags=df_filtered %>% left_join(quantiles, by = 'Slice') %>%
filter(Total.Area >= quant1)
flags=df_filtered %>% left_join(quantiles, by = 'Slice') %>%
filter(Total.Area >= quant1  & Total.Area <= quant0)
flags=df_filtered %>% left_join(quantiles, by = 'Slice') %>%
filter(Total.Area >= quant1  | Total.Area <= quant0)
setwd("~/Documents/CoMarker/Functions")
setwd("~/Documents/CoMarker/data")
write_csv(metadata,'metadata.csv')
~/Documents/CoMarker/~/Documents/CoMarker/
setwd("~/Documents/CoMarker")
setwd("~/Documents/CoMarker/data")
tm=read_csv('metadata.csv')
View(tm)
install.packages('pandoc')
install.packages('rmdformats')
install.packages('clinUtils')
df <- do.call("rbind", my.data)
## reorganise colnames
df$CaseID=rownames(df)
df$CaseID=sub("\\i.*", "", df$CaseID)
df$CaseID=gsub(" ","",df$CaseID)
df$replicate=sub("\\/.*", "", rownames(df))
df$replicate=sub("\\..*", "", df$replicate)
# Filter count outliers
df$Slice=as.factor(df$Slice)
df$Count=as.numeric(df$Count)
View(df)
nucleus
quantiles=df %>%
group_by(Slice)%>%
summarize(quant0 = quantile(Total.Area, probs = c(0.02), na.rm=TRUE),
quant1 = quantile(Total.Area, probs = c(0.98), na.rm=TRUE),
sd=sd(Count, na.rm=TRUE))
View(quantiles)
quantiles=df %>%
group_by(Slice)%>%
summarize(quant0 = quantile(Total.Area, probs = c(0.02), na.rm=TRUE),
quant1 = quantile(Total.Area, probs = c(0.98), na.rm=TRUE),
sd=sd(Count, na.rm=TRUE))
`%!in%` <- Negate(`%in%`)
markers=c(reference_marker,marker1,marker2,marker3,marker4,marker5, region_of_interest,"nucleus")
df_filtered=df[df$Slice %in% markers,]
flags=df_filtered %>% left_join(quantiles, by = 'Slice') %>%
filter(Count >= Count+4*sd | Count <= Count-(4*sd))
quantiles=df %>%
group_by(Slice)%>%
summarize(quant0 = quantile(Total.Area, probs = c(0.02), na.rm=TRUE),
quant1 = quantile(Total.Area, probs = c(0.98), na.rm=TRUE),
sd=sd(Count, na.rm=TRUE))
`%!in%` <- Negate(`%in%`)
markers=c(reference_marker,marker1,marker2,marker3,marker4,marker5, region_of_interest,"nucleus")
df_filtered=df[df$Slice %in% markers,]
flags=df_filtered %>% left_join(quantiles, by = 'Slice') %>%
filter(Count > Count+(3*sd) | Count < Count-(3*sd))
region_of_interest='Ab'
`%!in%` <- Negate(`%in%`)
markers=c(reference_marker,marker1,marker2,marker3,marker4,marker5, region_of_interest,"nucleus")
df_filtered=df[df$Slice %in% markers,]
flags=df_filtered %>% left_join(quantiles, by = 'Slice') %>%
filter(Count > Count+(3*sd) | Count < Count-(3*sd))
replicated_flags=flags$replicate
replicated_flags
View(flags)
flags=df_filtered %>% left_join(quantiles, by = 'Slice')
View(flags)
quantiles=df %>%
group_by(Slice)%>%
summarize(quant0 = quantile(Total.Area, probs = c(0.02), na.rm=TRUE),
quant1 = quantile(Total.Area, probs = c(0.98), na.rm=TRUE),
sdx=-3*sd(Count, na.rm=TRUE)+mean(Count),
sdx1=3*sd(Count, na.rm=TRUE)+mean(Count))
`%!in%` <- Negate(`%in%`)
markers=c(reference_marker,marker1,marker2,marker3,marker4,marker5, region_of_interest,"nucleus")
df_filtered=df[df$Slice %in% markers,]
flags=df_filtered %>% left_join(quantiles, by = 'Slice') %>%
filter(Count > sdx1| Count < sdx)
View(quantiles)
quantiles=df %>%
group_by(Slice)%>%
summarize(quant0 = quantile(Total.Area, probs = c(0.02), na.rm=TRUE),
quant1 = quantile(Total.Area, probs = c(0.98), na.rm=TRUE),
sdx=-3*sd(Count, na.rm=TRUE)+mean(Count, na.rm=TRUE),
sdx1=3*sd(Count, na.rm=TRUE)+mean(Count, na.rm=TRUE))
View(quantiles)
`%!in%` <- Negate(`%in%`)
markers=c(reference_marker,marker1,marker2,marker3,marker4,marker5, region_of_interest,"nucleus")
df_filtered=df[df$Slice %in% markers,]
flags=df_filtered %>% left_join(quantiles, by = 'Slice')
View(flags)
