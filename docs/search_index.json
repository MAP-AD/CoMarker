[["index.html", "CoMarker | The Manual Preface The Purpose of CoMarker Acknowledgements", " CoMarker | The Manual Eléonore Schneegans1, Samuel Boulger1, Vicky Chau1, Nurun Fancy1, Johanna Jackson1, Paul M. Matthews1 13 September 2022 Preface This manual introduces a standardised, reproducible image analysis pipeline, CoMarker, which was built to vastly decrease the time taken to assess the colocalisation of tissue markers, whilst eliminating subjectivity and human bias. Our script takes a cell-based approach, utilising nuclei markers to count cells which are positive for any given marker(s) and analyse the colocalisation of said markers, both respective and irrespective of a defined region of interest. We have, however, developed functions which allow users without a nuclei marker to revert to area coverage as the method of analysis. The pipeline is written in ImageJ Macro language (IJM) and R, but doesn’t require previous knowledge of either programming language, making it user friendly. The purpose of this code is to save time, money and resources by automating the analysis of markers, whilst eliminating human bias, hence the script is capable of producing a report containing a range of box plots with annotated statistical significance from an input of raw images in a short period of time. CoMarker can either be ran manually using Fiji ImageJ and R Studio, or through the command line. The Purpose of CoMarker CoMarker was designed to imitate manual counts by taking an independent cell-based approach to marker analysis. Existing standalone marker colocalisation analysis packages use a pixel-based approach to assess the area covered by any marker - therefore, in previous methods, colocalisation is described as the number of pixels covered by two or more markers. We allow the use of this pixel based-approach for users without a nuclei marker, however it is recommended that a nuclei marker is used in order to make the most out of the pipeline. When using the cell-based approach, colocalisation is described as any cell containing both the defined reference marker and another included marker. Consequently, the produced results are a better representation of the expression of cellular markers when the required output is the identification of cells positive for markers. CoMarker was designed for the analysis of images produced by imaging mass cytometry (IMC)- an immunohistochemistry technology that provides an integrative spatial tissue analysis. Nonetheless, CoMarker has the capacity to analyse images produced by any histochemistry method as long as the images for each marker are separated and not compiled together. Acknowledgements CoMarker was developed by Eléonore Schneegans1, Samuel Boulger1 and Vicky Chau1 as part of the UK DRI Multi-’omics Atlas Project, directed by Johanna Jackson1. 1 UK Dementia Research Institute and Deparatment of Brain Sciences, Imperial College London, London, UK. Find the CoMarker Github page here. "],["functions-and-capabilities.html", "Chapter 1 Functions and Capabilities 1.1 What does CoMarker do? 1.2 Functionality Comparison 1.3 Capabilities", " Chapter 1 Functions and Capabilities The idea behind CoMarker is to allow for a cell-based approach to marker colocalisation analysis, therefore for the purpose of this manual we will discuss the capabilities of the script for when a nuclei marker is used. If you plan to use the script without a nuclei marker, similar procedures apply, however instead of counts the output will be the total area containing each marker for each image. 1.1 What does CoMarker do? Counts the number of regions of interest. Finds the total area of the regions of interest. Counts the number of cells (based on a 1:1 ratio with the number of nuclei). Counts the number of cells which contain a reference marker signal. Counts the number of cells within and outside of a region of interest which contain a reference marker. Counts the number of cells which contain each marker signal. Counts the number of cells within and outside of a region of interest which contain each marker. Counts the number of cells positive for both the reference marker and each other marker (colocalised). Counts the number of cells within and outside of a region of interest positive for both the reference marker and each other marker (colocalised). Identifies image outliers and potential poor quality images (based on count distribution). Presents the proportion of marker-positive cells throughout the image and within the region of interest. Presents the proportion of reference marker-positive cells which are colocalised with each other marker, both respective and irrespective of the region of interest. Performs statistical test to assess the differences between specified groups of interest (i.e disease vs control) Produces a report, displaying a range of analysis graphs, parameters used and image outliers. 1.2 Functionality Comparison A table comparing CoMarker with existing image analysis software and manual counts. 1 We refer to CoMarker as an end-to-end pipeline due to its ability to perform a comprehensive analysis, from raw image to analysis report, independent of external software. 2 CoMarker performs its cell-based analysis independent of external software and doesn’t require a mask input. 3 CoMarker produces a user-friendly, presentable, and interactive analysis report with annotated statistical significance. 1.3 Capabilities 1 region of interest marker (e.g. GLUT1 - CNS blood vessel marker) 1 reference marker (e.g. Iba1 - Microglial marker) 1 nuclei marker (e.g. DAPI - DNA marker) Up to 5 general markers (e.g. CD68 - Microglial activation marker) "],["imagefile-formatting.html", "Chapter 2 Image/File Formatting 2.1 Image Formatting 2.2 File Formatting 2.3 Metadata Formatting 2.4 Example Directory Format", " Chapter 2 Image/File Formatting 2.1 Image Formatting Images must be saved as the name of the marker followed by ‘.tif’ - e.g., ‘Iba1.tif’, ‘DNA.tif’. 2.2 File Formatting The source files should be organised as such: Image Directory -&gt; One folder per patient per technical replicate -&gt; Marker.tif In the analysis, files sharing the same case ID will be identified and within subject data will be averaged. 2.3 Metadata Formatting The metadata must be stored as ‘metadata.csv’ and should be organised such that, as a bare minimum, it has columns for case IDs and the respective outcome variable (i.e. disease vs control). Additional columns may specify further outcomes to be investigated (i.e. genetic variants). The heading of the case ID column must state ‘CaseID’ with no space to allow for effective processing in the R script. 2.4 Example Directory Format "],["imagej-script-walkthrough.html", "Chapter 3 ImageJ Script Walkthrough 3.1 Specifying Parameters 3.2 Region of Interest 3.3 Nuclei 3.4 Reference Marker 3.5 Colocalisation Markers 3.6 Output", " Chapter 3 ImageJ Script Walkthrough This section of the manual will provide an overview of the steps taken in the ImageJ script, starting with the input parameters required for the script to function, followed by a walkthrough of how each marker is analysed. 3.1 Specifying Parameters When the ImageJ script is ran, the following dialog boxes will appear one at a time, with the latter dialog boxes changing depending on the initial inputs. It is important to find parameters that work best for each marker. A useful resource for information about markers is the Human Protein Atlas. Checking what markers should look like will help to guide decisions on parameters such as minimum area and thresholding method. 3.1.1 Dialog Box (1/3) Dialog Box (1/3) Reference marker: Add here the name of the reference marker to be analysed. The name should match the image file name minus the ‘.tif’. Minimum area: This refers to the minimum number of pixels a marker signal is required to cover in order to be analysed. It is desired to eliminate as much noise as possible while keeping all relevant signal. It would be a good idea to look at a few sample images when determining the minimum area. Autothresholding method: Select an autothresholding method from the drop-down menu. See the thresholding section of this manual for more information. Has DNA marker: select “Yes” if a nuclei marker or present or “No” if not. The image name should always be ‘DNA.tif’. Has region of interest: “Yes” if the study involves a region of interest (ROI) or “No” if not. Number of markers to colocalise: Input here the number of markers that you wish to analyse in addition to the reference, nuclei and ROI markers. Click ‘OK’ once done. 3.1.2 Dialog Box (2/3) Dialog Box (2/3) Marker colocalisation radius: this refers to the maximum proximity two markers can be in order to be deemed to be colocalised. This radius applies to reference marker-marker and (reference) marker-DNA colocalisation. Region of interest: Input the ROI marker here, ensuring that the name of the marker matches that in the file name. Use Gaussian and Watershed on ROI: Select either “Yes” or “No”. If “Yes”, this function blurs the ROI signal, before using a Watershed transform to segregate them. This is useful when the ROI signal is fragmented and is not densely populated within the region. ROI minimum area: If the answer was “Yes” to the previous input, then the minimum area should be higher as any gaps left by sparse markers will be filled by the blur. Radius around ROI: This allows for the region of interest to be expanded around the marker signal. If this is not desired set the value to 0. Click ‘OK’ once done. 3.1.3 Dialog Box (3/3) Dialog Box (3/3) State in this section the names of the markers to analyse, along with the minimum size and autothresholding method. Click ‘OK’ once done. Open the image directory in the pop-up finder. The script will now run automatically. 3.2 Region of Interest 3.2.1 Overview of Steps 3.2.2 Gaussian Blur The Gaussian blur function takes the average of the signal in all pixels within a given radius. For our function, we use a radius of 5 pixels after extensive comparisons. The blur is a means of resolving a problem faced when dealing with disperse or fragmented markers, such as amyloid-beta. Below is an example of the effects of the Gaussian blur on a slide stained for amyloid-beta. 3.2.3 Watershed Transform The Gaussian blur can cause clusters of signal to merge into each other so we use a watershed transform to separate those signals, as seen below. 3.2.4 Particle Analysis The next step is to run the analyse particles function, using the specified minimum area. Below is the outcome of the optional Gaussian-watershed function with a default minimum area of 1100 pixels compared with the raw image. The sensitivity of the function can be modified by changing the minimum size. 3.2.5 Enlargement Find here an example of a 30 pixel enlargement on the region of interest. The extent of the enlargement is to be specified by the user. 3.3 Nuclei 3.3.1 Thresholding The chosen threshold ultimately determines how much signal is included in the processed image. Our default threshold for DNA is ‘Otsu’ as it is a good mid-range threshold which includes as much signal as possible whilst eliminating noise. Otsu thresholding returns a single intensity threshold determined by minimizing intra-class intensity variance, or equivalently, by maximizing inter-class intensity variance. DNA Threshold Montage 3.3.2 Watershed The watershed transform is used here to separate overlapping DNA signal in the 2D image. 3.3.3 Particle Analysis DNA signal is then counted and analysed. Each DNA count represents a cluster of touching pixels with an area larger than the specified minimum area. We have set the default minimum area as 4 pixels due to some cells having nuclei with a diameter as small as 2 microns, thereby covering at least 4 pixels. Most nuclei, however, are larger than this, so it may be beneficial to increase the minimum area depending on the study. 3.4 Reference Marker 3.4.1 Thresholding Our default threshold for the reference marker is ‘Otsu’ as it is a good mid-range threshold which includes as much signal as possible whilst eliminating noise. Iba1 Threshold Montage 3.4.2 Particle Analysis Reference marker-positive cells are identified by overlaying enlarged reference marker signal and DNA. Here, we present several close-up images to display how the script recognises each positive cell and avoids false positives/negatives. The images show our reference marker (Iba1) in red, merged with DNA in cyan. Despite tightly clustered DNA, only the correct cells are counted. Cell only counted once (same colour overlay) despite fragmented signal. Reference marker cells within the ROI are simply these detected cells which are situated within the enlarged region of interest. 3.5 Colocalisation Markers This section of the code is identical for each of the colocalisation markers used, however different minimum areas and thresholds can be used. 3.5.1 Thresholding The default threshold is again set to ‘Otsu’ which we recommend due to its balance between removing noise and retaining useful signal. It is important, however, that different thresholds for each marker. Thresholding montages can be produced in FIJI ImageJ through Image -&gt; Adjust -&gt; Auto Threshold -&gt; Try All. Find here a few example thresholding montages. CD68 Thresholding Montage HLA-DR Thresholding Montage pTau Thresholding Montage 3.5.2 Particle Analysis Colocalisation marker-positive cells by the same processes as reference markers. (See here Particle Analysis). 3.6 Output The ImageJ script output consists of a results table for every replicate. These results tables are collated and read by the R script. "],["r-script-walkthrough.html", "Chapter 4 R Script Walkthrough 4.1 Necessary R Packages 4.2 Input Parameters 4.3 Quality Control 4.4 HTML Output", " Chapter 4 R Script Walkthrough This section of the manual will provide an overview of the steps taken in the R script, starting with the inputs required for the script to function. 4.1 Necessary R Packages Below are the packages required for the pipeline to run. Copy and paste the section below in order to install all necessary packages. install.packages(&#39;tidyverse&#39;) install.packages(&#39;readr&#39;) install.packages(&#39;stringr&#39;) install.packages(&#39;dplyr&#39;) install.packages(&#39;rqdatatable&#39;) install.packages(&#39;rlist&#39;) install.packages(&#39;ggplot2&#39;) install.packages(&#39;gridExtra&#39;) install.packages(&#39;ggsignif&#39;) install.packages(&#39;ggpubr&#39;) install.packages(&#39;paletteer&#39;) install.packages(&#39;plyr&#39;) install.packages(&#39;knitr&#39;) install.packages(&#39;data.table&#39;) install.packages(&#39;plotly&#39;) install.packages(&#39;clinUtils&#39;) install.packages(&#39;rlist&#39;) install.packages(&#39;rmdformats&#39;) 4.2 Input Parameters Input the relevant parameters into the coloc_wrapper function of the R code. There is an example input file in the Github repository. coloc_wrapper(image_directory=&quot;/Users/samboulger/Desktop/Manual Counts/&quot;, results_directory=&quot;/Users/samboulger/Desktop/Manual Counts/&quot;, metadata_directory=&#39;/Users/samboulger/Desktop/Data/&#39;, CoMarker_directory=&#39;/Users/samboulger/OneDrive - Nexus365/Imperial/CoMarker Script/&#39;, DNA=TRUE, ROI=TRUE, number_marker=2, reference_marker=&quot;Iba1&quot;, marker1=&quot;CD68&quot;, marker2=&#39;HLA-DR&#39;, marker3=&#39;&#39;, marker4=&#39;&#39;, marker5=&#39;&#39;, region_of_interest=&#39;Ab&#39;, outcome=&#39;trem2_all&#39;, remove_outliers=TRUE, outliers_threshold=&#39;3.5&#39;) Specify the image directory, results directory, metadata directory, the directory in which the CoMarker folder is stored, as well as whether there are DNA and ROI markers (TRUE or FALSE), the number of markers, the reference markers, colocalisation markers, region of interest, and the outcome (from the metadata). Leave blank any sections that are not required, such as any additional markers or region_of_interest if you selected to not have one. It is important to ensure that ‘CoMarker_directory’ is set to the directory of the main folder on your device. The main folder must include the ‘Functions’ and ‘HTML Reports’ folders. This naming is crucial for the R script to run. The wrapper function will either need to be sourced or ran before the function will operate. 4.3 Quality Control The script has a built-in image-flagging section which identifies images containing extreme count outliers. The threshold for detecting outliers is to be specified by the user (to be inputted as the number of standard deviations from the mean), as well as whether to remove the flagged images from the analysis. A table of the detected images is presented in the output report. More often than not, images with flagged counts are of poor quality and should not be considered in the analysis. 4.4 HTML Output Once the R script has finished running, a report named ‘CoMarker_Analysis_Report’ will be created in a report folder within the results directory. Open this report in the web browser and you will be able to easily visualise the analysis. The report is separated into sections for each marker, as well as a section highlighting any significant results. By using the table of contents, the user can quickly skip to a desired section. Box plots are created for pretty much every useful ROI-reference marker-colocalisation marker combination. On each box plot, statistical significance is annotated, such that: ns = non-significant * = p&lt;0.05 ** = p&lt;0.01 *** = p&lt;0.001 The report will be overwritten if the analysis is repeatedly performed on the same folder - renaming the report will prevent it from being deleted when a new one is produced. "],["instructions---from-start-to-finish.html", "Chapter 5 Instructions - From Start to Finish 5.1 Download the Repository 5.2 Run ImageJ 5.3 Run R Studio", " Chapter 5 Instructions - From Start to Finish This section describes how to use the script from start to finish, without too much extra detail. 5.1 Download the Repository Download the github repo and save the folder on your device. Find the CoMarker Github page here. The main folder must include the ‘Functions’ and ‘HTML Reports’ folders. This naming is crucial for the R script to run. 5.2 Run ImageJ Download Fiji ImageJ here if it is not already installed on your device. Open the script named ‘CoMarker_Macro.ijm’ on ImageJ, and click run. Input your parameters in the dialog box, referring to the ImageJ Walkthrough section of this site for additional details. Once all three parameter boxes have been completed, the script will run automatically. The time taken to run the script will depend on the number of images used. It typically takes 1 to 8 seconds to analyse all of the images for each replicate. Once the script has finished running, ImageJ may be closed. 5.3 Run R Studio Open R and run or source the wrapper function, which is situated in the functions folder of the repository. Input the parameters, as explained in the R Walkthrough section of this site. Run the script. A HTML document will be produced in the results directory, summarising your results. "],["instructions---using-the-command-line.html", "Chapter 6 Instructions - Using the Command Line 6.1 Download the Repository 6.2 Input Parameters 6.3 Open a Terminal Window", " Chapter 6 Instructions - Using the Command Line This section describes how to use the command line to run the pipeline. This method will run the analysis from start to finsh by a single command, executed via the terminal. 6.1 Download the Repository Download the github repo and save the folder on your device. Find the CoMarker Github page here. The main folder must include the ‘Bash’, ‘Functions’ and ‘HTML Reports’ folders. 6.2 Input Parameters Edit param_fiji.txt and param_R.txt with the desired parameters and save. 6.3 Open a Terminal Window Open a terminal window. Change directory (cd) to the ‘CoMarker/Bash’ directory. Write sh full_run.sh. The output files will be saved in the folders specified in the parameters. Note: The full_run.sh file works for mac OS; it can be adapted to windows by changing the path to the Fiji app. "],["validation.html", "Chapter 7 Validation 7.1 Manual Counts Comparison", " Chapter 7 Validation 7.1 Manual Counts Comparison Here we present a comparison between the script and blind manual counts. The aim of the code is to imitate manual counts while speeding up the time taken to analyse collections of images. Counts were obtained by both internal and external researchers, with the method of analysis being to count signal within 2 microns of DNA (except for ROI counts). Images IDs have been removed from the plot for privacy purposes. The results from these comparisons show that the script counts marker signal/positive cells accurately, and we aim to add more manual count data to the comparison in the near future. The comparisons below compare counts produced by CoMarker and manual counts for the same images. The bar charts on the left display the paired counts, while the Bland-Altman plots on the right show the difference between the count values for each image with respect to a 95% confidence interval. 7.1.1 CD68 - Colocalisation Marker Colocalisation Marker Count Validation (Pearson’s r = 0.956) 7.1.2 GLUT1 - Region of Interest Region of Interest Count Validation (Pearson’s r = 0.975) 7.1.3 Iba1 - Reference Marker Reference Marker Count Validation (Pearson’s r = 0.991) 7.1.4 Amyloid-beta - Region of Interest Region of Interest Count Validation (Pearson’s r = 0.995) 7.1.5 Intraclass Correlation Intraclass correlations were calculated between counts of Ab, Iba1 and CD68 markers made by an internal human counter, an external human counter, and CoMarker. 7.1.5.1 Single Score Intraclass Correlation Model: twoway; Type: agreement; Raters = 3; n = 35 ICC(A,1) = 0.993; p = 1.7e-67 95%-Confidence Interval for ICC Population Values: 0.987 &lt; ICC &lt; 0.996 We can conclude that there is an excellent level of within-class correlation, both between each human counter, and between each counter and CoMarker. "]]
